// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: url.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id,email,password,created_at) VALUES ($1,$2,$3,$4) RETURNING id, email, password, created_at
`

type CreateUserParams struct {
	ID        pgtype.UUID
	Email     string
	Password  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.CreatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getURL = `-- name: GetURL :one
SELECT id, user_id, original_url, short_code, created_at FROM urls WHERE  id=$1 LIMIT 1
`

func (q *Queries) GetURL(ctx context.Context, id pgtype.UUID) (Url, error) {
	row := q.db.QueryRow(ctx, getURL, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CreatedAt,
	)
	return i, err
}

const getURLByUserID = `-- name: GetURLByUserID :one
SELECT id, user_id, original_url, short_code, created_at FROM urls WHERE user_id=$1 LIMIT 10
`

func (q *Queries) GetURLByUserID(ctx context.Context, userID pgtype.UUID) (Url, error) {
	row := q.db.QueryRow(ctx, getURLByUserID, userID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.OriginalUrl,
		&i.ShortCode,
		&i.CreatedAt,
	)
	return i, err
}
